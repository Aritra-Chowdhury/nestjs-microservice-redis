openapi: 3.0.1
info:
  title: Banking API
  description: A banking-management-application ,used for creating and maintain customer
    account. It also allows the customer to apply for a loan.
  termsOfService: http://swagger.io/terms/
  contact:
    email: chowdhuryaritra96@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:3000/api/v1
tags:
- name: customer
  description: Everything about the customer.
- name: account
  description: Account related opertaions for the customer account.
- name: offer
  description: offer related opertaions.
- name: loan
  description: Loan related opertaions.
paths:
  /customer/register:
    post:
      tags:
      - customer
      summary: Register a new customer
      description: Allows user to register into the application.
      operationId: register
      requestBody:
        description: Customer object that needs to be registered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerBasic'
        required: true
      responses:
        200:
          description: User registered successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBasic'
        400:
          description: Invalid request body
          content: {}
      x-codegen-request-body-name: body
  /customer/login:
    post:
      tags:
      - customer
      summary: Customers can login into the application
      description: Allows user to login into the appliation with either customerId
        or email and password
      operationId: login
      requestBody:
        description: Customer object that needs to be registered.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerBasic'
        required: true
      responses:
        200:
          description: User registered successful.
          headers:
            x-auth-token:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBasic'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
      x-codegen-request-body-name: body
  /customer:
    put:
      tags:
      - customer
      summary: Update an existing customer
      operationId: updateCustomer
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Customer details object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        200:
          description: Customer details update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerReponse'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Customer not found
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /customer/{customerId}:
    get:
      tags:
      - customer
      summary: Find customer by customerID
      description: Returns a single customer
      operationId: getCustomerById
      parameters:
      - name: customerId
        in: path
        description: CustomerID of customer to return
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerReponse'
        400:
          description: Invalid request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Customer not found
          content: {}
      security:
      - ApiKeyAuth: []
  /account:
    get:
      tags:
      - account
      summary: Find all account for a customer
      description: Returns an array of Account details
      operationId: getAccountByCustomerId
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - ApiKeyAuth: []
    put:
      tags:
      - account
      summary: Update an existing account
      operationId: updateAccount
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Account details object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        200:
          description: Account details update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: account not found
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    post:
      tags:
      - account
      summary: Creates an bank account for the customer
      description: Allows user to create a new bank account.
      operationId: createAccount
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Account object that needs to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        200:
          description: Account created successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /account/{accountId}:
    get:
      tags:
      - account
      summary: Find account by accountID
      description: Returns a single Account details
      operationId: getAccountById
      parameters:
      - name: accountId
        in: path
        description: AccountID of account to return
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Invalid request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Account not found
          content: {}
      security:
      - ApiKeyAuth: []
    delete:
      tags:
      - account
      summary: Remove/deactivate an account
      description: Remove/deactivate an account
      operationId: removeAccountById
      parameters:
      - name: accountId
        in: path
        description: AccountID of the account to remove
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: Account succesfully removed/deactivated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid AccountID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Account not found
          content: {}
      security:
      - ApiKeyAuth: []
  /offer:
    get:
      tags:
      - offer
      summary: Find all offer.
      description: Returns an array of offer details
      operationId: getAllOffer
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Offer not found
          content: {}
      security:
      - ApiKeyAuth: []
    put:
      tags:
      - offer
      summary: Updates an offer
      description: Allows admin to update a offer.
      operationId: updateOffer
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Offer object that needs to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      responses:
        200:
          description: Offer created successful.
          content: {}
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Offer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    post:
      tags:
      - offer
      summary: Creates an offer
      description: Allows admin to create a offer.
      operationId: createOffer
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Offer object that needs to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      responses:
        201:
          description: Offer created successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /offer/{offerName}:
    get:
      tags:
      - offer
      summary: Find offer by offerName
      description: Returns a single offer details
      operationId: getOfferByofferName
      parameters:
      - name: offerName
        in: path
        description: OfferName of offer to return
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        400:
          description: Invalid request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: OfferName not found
          content: {}
      security:
      - ApiKeyAuth: []
  /offer/{loanType}/{offerType}:
    get:
      tags:
      - offer
      summary: Find offer by loanType and offerType
      description: Returns a single offer details
      operationId: getOfferByLoanTypeAndOfferType
      parameters:
      - name: loanType
        in: path
        description: loanType of offer to return
        required: true
        schema:
          type: string
      - name: offerType
        in: path
        description: offerType of offer to return
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        400:
          description: Invalid request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Offer not found
          content: {}
      security:
      - ApiKeyAuth: []
  /loan:
    get:
      tags:
      - loan
      summary: Find all loan.
      description: Returns an array of loan details for a customer
      operationId: getAllLoanByCutomerId
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: Loan not found
          content: {}
      security:
      - ApiKeyAuth: []
    put:
      tags:
      - loan
      summary: Updates a loan for a customer
      description: Allows user to update a loan.
      operationId: updateLoan
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Loan object that needs to be updates.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
        required: true
      responses:
        200:
          description: Loan created successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    post:
      tags:
      - loan
      summary: Creates a loan for a customer
      description: Allows user to create a loan.
      operationId: createLoan
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Loan object that needs to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
        required: true
      responses:
        201:
          description: Loan created successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /loan/{loanNumber}:
    get:
      tags:
      - loan
      summary: Find loan by loanNumber
      description: Returns a single loan details
      operationId: getLoanById
      parameters:
      - name: loanNumber
        in: path
        description: Loan Number of loan to return
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        400:
          description: Invalid request
          content: {}
        401:
          description: Unauthorized
          content: {}
        404:
          description: loanNumber not found
          content: {}
      security:
      - ApiKeyAuth: []
  /loan/status:
    put:
      tags:
      - loan
      summary: Updates a loan for a customer
      description: Allows admin to verify a loan and updates the status.
      operationId: validateLoan
      parameters:
      - name: x-auth-token
        in: header
        description: Authentication token
        required: true
        schema:
          type: string
      requestBody:
        description: Loan object that needs to be updates.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanValidate'
        required: true
      responses:
        200:
          description: Loan created successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        400:
          description: Invalid request body
          content: {}
        401:
          description: Unauthorized
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
components:
  schemas:
    CustomerBasic:
      required:
      - email
      - name
      - password
      type: object
      properties:
        customerId:
          type: string
          description: CustomerId for customer.
        isActive:
          type: string
          description: Customer account status.
        name:
          type: string
          description: Name of the customer.
        email:
          type: string
          description: Email Id of the customer.
        password:
          type: string
          description: Credential to login in the appliation.
    Customer:
      required:
      - customerId
      type: object
      properties:
        customerId:
          type: string
          description: CustomerId for customer.
        name:
          type: string
          description: Name of the customer.
        email:
          type: string
          description: Email Id of the customer.
        password:
          type: string
          description: Credential to login in the appliation.
        userDetails:
          type: object
          description: Personal details of the customer.
          allOf:
          - $ref: '#/components/schemas/UserDetails'
        mailingAddress:
          type: object
          description: Mailing address of the customer.
          allOf:
          - $ref: '#/components/schemas/MailingAddress'
      xml:
        name: Customer
    CustomerReponse:
      type: object
      properties:
        customerId:
          type: string
          description: CustomerId for customer.
        name:
          type: string
          description: Name of the customer.
        email:
          type: string
          description: Email Id of the customer.
        userDetails:
          type: object
          description: Personal details of the customer.
          allOf:
          - $ref: '#/components/schemas/UserDetails'
        mailingAddress:
          type: object
          description: Mailing address of the customer.
          allOf:
          - $ref: '#/components/schemas/MailingAddress'
      xml:
        name: CustomerReponse
    UserDetails:
      required:
      - dob
      - martialStatus
      - nationality
      - panCard
      - phoneNumber
      type: object
      properties:
        dob:
          type: string
          description: Date of the birth of the customer.
          format: date-time
        martialStatus:
          type: string
          description: Martial status of the customer.
          enum:
          - unmarried
          - married
          - separated
        panCard:
          type: string
          description: Pan Card number of the customer.
        nationality:
          type: string
          description: Nationality of the customer.
        phoneNumber:
          type: string
          description: Phone number of the customer.
      xml:
        name: UserDetails
    MailingAddress:
      required:
      - address1
      - city
      - country
      - state
      - zipCode
      type: object
      properties:
        address1:
          type: string
          description: Mailing address1 of the customer.
        address2:
          type: string
          description: Mailing address2 of the customer.
        city:
          type: string
          description: Mailing city of the customer.
        state:
          type: string
          description: Mailing state of the customer.
        country:
          type: string
          description: Mailing country of the customer.
        zipCode:
          type: string
          description: Mailing zip-code of the customer.
      xml:
        name: MailingAddress
    Account:
      required:
      - accountType
      - customerId
      - mailingAddress
      - userDetails
      type: object
      properties:
        accountNumber:
          type: string
          description: Account_number for the customer account.
        accountType:
          type: string
          description: Account_type for the customer account.
          enum:
          - Current
          - Saving
          - Credit
        customerId:
          type: string
          description: Customer_id of the customer.
        userDetails:
          type: object
          description: Personal details of the customer.
          allOf:
          - $ref: '#/components/schemas/UserDetails'
        mailingAddress:
          type: object
          description: Mailing address of the customer.
          allOf:
          - $ref: '#/components/schemas/MailingAddress'
        openingDate:
          type: string
          description: Account opening date.
          format: date-time
        closingDate:
          type: string
          description: Account closing date.
          format: date-time
      xml:
        name: Account
    Offer:
      required:
      - loanType
      - offerName
      - offerPercentage
      - offerType
      type: object
      properties:
        offerId:
          type: string
          description: offer Id for a offer
        offerName:
          type: string
          description: Name of the offer.
        offerType:
          type: string
          description: Type of the offer.
          enum:
          - Platinum
          - Gold
          - Silver
        loanType:
          type: string
          description: Type of the loan.
          enum:
          - Home
          - Car
          - Personal
        offerPercentage:
          type: number
          description: Rate of interest of the offer.
        lastUpdateDate:
          type: string
          description: Account last Update Date.
          format: date-time
      xml:
        name: Offer
    OfferLoan:
      required:
      - offerName
      - offerType
      type: object
      properties:
        offerName:
          type: string
          description: Name of the offer.
        offerType:
          type: string
          description: Type of the offer.
          enum:
          - Platinum
          - Gold
          - Silver
        offerPercentage:
          type: number
          description: Rate of interest of the offer.
      xml:
        name: OfferLoan
    Loan:
      required:
      - accountNumber
      - loanAmount
      - loanDuration
      - loanType
      - offer
      type: object
      properties:
        loanNumber:
          type: string
          description: loan number for a loan
        customerId:
          type: string
          description: Customer_id of the customer.
        accountNumber:
          type: string
          description: Account_number for the customer account.
        loanType:
          type: string
          description: Type of the loan.
          enum:
          - Home
          - Car
          - Personal
        loanAmount:
          type: number
          description: Amount of a loan.
        loanDuration:
          type: number
          description: Duration of a loan.
        offer:
          type: object
          description: Offer details for a loan.
          allOf:
          - $ref: '#/components/schemas/OfferLoan'
        status:
          type: string
          description: Status of the loan.
          default: Pending
          enum:
          - Pending
          - Approved
          - Rejected
        monthlyEMI:
          type: number
          description: monthly EMI amount to be paid.
        loanCreationDate:
          type: string
          description: Loan creationg date.
          format: date-time
        lastUpdateDate:
          type: string
          description: Account last Update Date.
          format: date-time
      xml:
        name: Loan
    LoanValidate:
      required:
      - loanNumber
      - status
      type: object
      properties:
        loanNumber:
          type: string
          description: loan number for a loan
        status:
          type: string
          description: Status of the loan.
          default: Pending
          enum:
          - Pending
          - Approved
          - Rejected
      xml:
        name: LoanValidate
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-auth-token
      in: header
